{"ast":null,"code":"import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var count = config.count,\n      _a = config.resetOnSuccess,\n      resetOnSuccess = _a === void 0 ? false : _a;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/retry.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,kBAAT,QAAmC,sBAAnC;AACA,SAAS,QAAT,QAAyB,kBAAzB;AAuDA,OAAM,SAAU,KAAV,CAAmB,aAAnB,EAAiE;AAA9C,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,QAAA;AAA8C;;AACrE,MAAI,MAAJ;;AACA,MAAI,aAAa,IAAI,OAAO,aAAP,KAAyB,QAA9C,EAAwD;AACtD,IAAA,MAAM,GAAG,aAAT;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG;AACP,MAAA,KAAK,EAAE;AADA,KAAT;AAGD;;AACO,MAAA,KAAK,GAA6B,MAAM,CAAnC,KAAL;AAAA,MAAO,EAAA,GAA2B,MAAM,CAAX,cAA7B;AAAA,MAAO,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAA7B;AAER,SAAO,KAAK,IAAI,CAAT,GACH,QADG,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAmB;AACzB,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,QAAJ;;AACA,QAAM,iBAAiB,GAAG,YAAA;AACxB,UAAI,SAAS,GAAG,KAAhB;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,IAAI,kBAAJ,CACE,UADF,EAEE,UAAC,KAAD,EAAM;AACJ,YAAI,cAAJ,EAAoB;AAClB,UAAA,KAAK,GAAG,CAAR;AACD;;AACD,QAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD,OAPH,EASE,SATF,EAUE,UAAC,GAAD,EAAI;AACF,YAAI,KAAK,KAAK,KAAd,EAAqB;AACnB,cAAI,QAAJ,EAAc;AACZ,YAAA,QAAQ,CAAC,WAAT;AACA,YAAA,QAAQ,GAAG,IAAX;AACA,YAAA,iBAAiB;AAClB,WAJD,MAIO;AACL,YAAA,SAAS,GAAG,IAAZ;AACD;AACF,SARD,MAQO;AACL,UAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD;AACF,OAtBH,CADS,CAAX;;AA0BA,UAAI,SAAJ,EAAe;AACb,QAAA,QAAQ,CAAC,WAAT;AACA,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,iBAAiB;AAClB;AACF,KAjCD;;AAkCA,IAAA,iBAAiB;AAClB,GAtCM,CAFX;AAyCD","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nexport function retry(configOrCount) {\n    if (configOrCount === void 0) { configOrCount = Infinity; }\n    var config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    var count = config.count, _a = config.resetOnSuccess, resetOnSuccess = _a === void 0 ? false : _a;\n    return count <= 0\n        ? identity\n        : operate(function (source, subscriber) {\n            var soFar = 0;\n            var innerSub;\n            var subscribeForRetry = function () {\n                var syncUnsub = false;\n                innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, function (err) {\n                    if (soFar++ < count) {\n                        if (innerSub) {\n                            innerSub.unsubscribe();\n                            innerSub = null;\n                            subscribeForRetry();\n                        }\n                        else {\n                            syncUnsub = true;\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}